
buildscript {
    repositories {
//        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name "mule-releases"
            url "https://repository.mulesoft.org/nexus/content/repositories/releases/"
        }
        maven {
            name "mule-snapshots"
            url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "org.mule.weave:weave-gradle-plugin:" + weavedocVersion
        classpath "com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.10"
        classpath group: 'org.mule.weave', name: 'runtime', version: weaveVersion
        classpath group: 'org.mule.weave', name: 'core-modules', version: weaveVersion
        classpath group: 'org.mule.weave', name: 'file-module', version: fileModuleVersion
    }
}

apply plugin: 'java'
apply plugin: 'dataweave'
group = "org.mule.weave"
version = "0.0.1-SNAPSHOT"

repositories {
    // mavenLocal()
    mavenCentral()
    maven {
        name "mule-releases"
        url "http://repository.mulesoft.org/nexus/content/repositories/releases/"
    }
    maven {
        name "mule-snapshots"
        url "http://repository.mulesoft.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    testCompile group: 'org.mule.weave', name: 'wtf', version: wtfVersion
    testCompile group: 'org.mule.weave', name: 'yaml-module', version: weaveVersion
}

task docs(type: Zip) {
    from 'src/main/docs/'
}


ext {
    aws = [
            accessKey: System.getenv("AWS_ACCESS_KEY_ID"),
            secretKey: System.getenv("AWS_SECRET_KEY")
    ]
}

import com.monochromeroad.gradle.plugin.aws.s3.S3Sync
import org.mule.weave.v2.runtime.DataWeaveScriptingEngine
import org.mule.weave.v2.runtime.ScriptingBindings
import org.mule.weave.v2.model.ServiceManager$
import org.mule.weave.v2.model.EmptyWeaveServicesProvider$
import scala.Some

task uploadDistro(type: S3Sync) {
    description = "Deploy tutorial"
    accessKey aws.accessKey
    secretKey aws.secretKey
    noDelete true
    acl com.monochromeroad.gradle.plugin.aws.s3.ACL.PublicRead
    from "build/distributions/"
    into "weave-tutorial"
}

task tutorialContentToJson(type: TutorialContentToJsonTask)


docs.dependsOn(weavetest)
build.dependsOn(docs)
build.dependsOn(tutorialContentToJson)

class TutorialContentToJsonTask extends DefaultTask {
    @TaskAction
    def run() {
        def engine = new DataWeaveScriptingEngine()
        def compile = engine.compile(new File("$project.projectDir/transform.dwl"))
        def serviceManager = ServiceManager$.MODULE$.apply(EmptyWeaveServicesProvider$.MODULE$)
        def outputFile = new File("$project.buildDir/distributions/tutorial_content.json")
        compile.write(new ScriptingBindings(), serviceManager, Some.apply(outputFile))
    }
}